def templatePath = 'https://raw.githubusercontent.com/openshift-microservices-demo/openshift-microservices/template/automation/all-in-one.yaml'
def templateName = 'boutique-shop-pipeline'
pipeline {
  agent {
    node {
      label 'boutique'
    }
  options {
    timeout(time: 5, unit: 'MINUTES')
  }
  stages {
    stage('preamble') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              echo "Using project: ${openshift.project()}"
            }
          }
        }
      }
    }
  }
  stage('cleanup') {
    steps {
      script {
        openshift.withCluster() {
          openshift.withProject() {
            openshift.selector("all", [ template : templateName ]).delete() {
            if (openshift.selector("secrets", templateName).exists()) {
              openshift.selector("secrets", templateName).delete()
              }
            }
          }
        }
      }
    }
  stage('build') {
    steps {
      script {
        openshift.withCluster() {
          openshift.withProject() {
            def builds = openshift.selector("bc", templateName).related('builds')
            timeout (5) {
              builds.untilEach(1) {
                return (it.object().status.phase == "Complete")
                }
              }
            }
          }
        }
      }
    }
  stage('deploy') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  def rm = openshift.selector("dc", templateName).rollout().latest()
                  timeout(5) { 
                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                      return (it.object().status.phase == "Running")
                    }
                  }
                }
            }
          }
        }
      }
  stage('tag') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.tag("${templateName}:latest", "${templateName}-staging:latest") 
                }
              }
            }
          }
        }
      }
    }
  }
